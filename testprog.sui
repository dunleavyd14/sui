
type Vector { //normal type
	a : int;
	b : int;
	c : int;
}

type Tuple <A, B, C> {//generic type

	a : A;
	b : B;
	c : C;
} 

func add <T> (a : T, b : T) T { //generic function
	return a + b;
}

func sum (a : Tuple<int, int, int>) int {
	return a.a + a.b + a.c;
}

func sum (a : Vector) int {
	s := a.a + a.b + a.c;
	return s;
}


func main (argc : int, argv : **byte) int {
	vec := {Vector: 1, 3, 5};
	arr := [int: 2, 4, 6];
	tup := {Tuple<int, int, int>: 1, 4, 9};
	tup2 := {Tuple<int, float, bool>: 1, 2.f, true};
	printf("Vector sum: %d \n", sum(vec));
	printf("Tuple sum: %d \n", sum(tup));
	
	return 0;
}


